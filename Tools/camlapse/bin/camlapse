#!/bin/bash

# This is a simple script that will take pictures with raspistill
# and will store them on the folder PICS_DIR defined below.
# The script automatically cleans the older pictures from the same
# folder, keeping MAX_PICS number of pictures stored on the folder.
#
# The script will also generate a small MP4 animation with the JPEG
# images it has taken. Also a .log file will be created with every
# picture with information like temperatures, uptime, etc...
#
# Make sure you only use this folder for this script, or you may
# lose other files during cleanup.
#
# The best output folder for this script on the Raspberry Pi is
# a tmpfs folder (folder in RAM) as it avoids write cycles on the
# SD card.
# For example, this is my entry in /etc/fstab:
# tmpfs /var/www/html/img tmpfs defaults,noatime,gid=1000, \
#                               uid=1000,nodev,noexec,mode=0755, \
#                               size=50M 0 0
#
# If you have a webserver, you can also set a tmpfs folder under
# /var/www/html so you can access the last X pictures from your
# browser.
#
# You can copy this file to /usr/local/bin and give 755 permitions,
# so it can be called straight from the terminal at any place.
#
# You should add this script to crontab so it runs automatically.
# For example this is my entry in crontab:
# */10 * * * * /bin/bash -c "/usr/local/bin/camlapse" \
#                           >> /var/www/html/img/camlapse.txt 2>&1
#
# Make sure you have installed ffmpeg for the creation of the
# MP4 animation
#

# The directory where the pictures will be saved:
PICS_DIR="/var/www/html/img"

# The maximum number of pictures to keep on the folder:
MAX_PICS=48

# The raspistill parameters (excluding -o)
RASPISTILL_PARAMS="-w 800 -h 600 -drc high -ex night -awb sun -q 20 -sh 50 -th 160:120:10"

# The city to retrieve the weather conditions:
WEATHER_CITY="Krakow"

# --------- Main code starts here ---------

TIME_HUM=$(date)
TIME_NOW=$(date +"%s")

# Check if there is a raspistill already running:
PID_RASPISTILL=$(pidof raspistill)
if [ ! -z "$PID_RASPISTILL" ]
then
    echo "Raspistill already running. Trying again in 5 seconds"
    sleep 5
fi

echo "Generating statistics, taking picture and generating timelapse video at $TIME_HUM"

# Fill statistics:
CPU_TEMP=$(vcgencmd measure_temp | cut -d"=" -f2 | cut -d"'" -f1)
IN_TEMP="0.00"
OUT_TEMP=$(cat /sys/bus/w1/devices/28-*/w1_slave | sed -n 's/^.*\(t=[^ ]*\).*/\1/p' | sed 's/t=//' | awk '{x=$1}END{printf "%.1f", x/1000}')
UPTIME=$(awk '{print $1}' /proc/uptime | cut -d'.' -f1)
echo "CPU_TEMP=$CPU_TEMP" >> $PICS_DIR/$TIME_NOW.log
echo "IN_TEMP=$IN_TEMP" >> $PICS_DIR/$TIME_NOW.log
echo "OUT_TEMP=$OUT_TEMP" >> $PICS_DIR/$TIME_NOW.log
echo "UPTIME=$UPTIME" >> $PICS_DIR/$TIME_NOW.log
echo "TIME_NOW=$TIME_NOW" >> $PICS_DIR/$TIME_NOW.log

TIME_ANNOTATION=$(date +"%F %H:%M")
TEMP_ANNOTATION="CPU: T=${CPU_TEMP}'C, Outside: T=${OUT_TEMP}'C"
HUMIDITY_ANNOTATION=$(curl -s http://wttr.in/${WEATHER_CITY}?format=%22%h%22 | tr -d '"')
WEATHER_ANNOTATION=$(curl -s http://wttr.in/${WEATHER_CITY}?format=%22%C%22 | tr -d '"')

# Take the picture here and add annotations:
raspistill -o $PICS_DIR/$TIME_NOW.jpg $RASPISTILL_PARAMS -ae 20,0x00,0x8080FF -a 1024 -a "${TIME_ANNOTATION}\n$TEMP_ANNOTATION RH=${HUMIDITY_ANNOTATION} ($WEATHER_ANNOTATION)"

# Create the MP4 animation:
ffmpeg -framerate 4 -pattern_type glob -i "$PICS_DIR/*.jpg" -c:v h264_omx -b:v 1200k $PICS_DIR/timelapse.mp4 -hide_banner -loglevel quiet -y

# Remove older pictures:
TOTAL_PICS=$(ls $PICS_DIR/*.jpg | wc -l)
if [ "$TOTAL_PICS" -gt "$MAX_PICS" ]
then
	OLDEST_TIME=$(ls $PICS_DIR/*.jpg | head -n1 | cut -d'.' -f1)
	rm -rf $OLDEST_TIME.*
fi
